package KYL.chapter04;

/**
 * 1.어떤 상황에 이 패턴을 이용할지
 * 팩토리 메소드 (Factory method) 패턴
 * 구체적으로 어떤 인스턴스를 만들지는 서브 클래스가 정한다.
 * 다양한 구현체 (Product)가 있고, 그중에서 특정한 구현체를 만들 수 있는 다양한 팩토리 (Creator)를 제공할 수 있다
 * 확장에 열려있고 변경에 닫혀있는 구조
 * 변경에 닫혀있다 -> 기존 코드를 변경하지 않고 새롭게 확장 가능
 * 2.예시
 * 3.장단점
 * 장점 = 기존 코드를 건드리지 않고 새로운 인스턴스를 다른 방법으로 확장 가능하다
 * = product 와 느슨한 결합 (loosely coupling)
 * 단점 = 패턴 적용시 클래스가 늘어나는 단점이 있다.
 */
public class FactoryApplication {
}
